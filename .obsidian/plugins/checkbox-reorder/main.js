/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CheckboxReorderPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/reorderCheckboxes.ts
function reorderCheckboxesInList(inputText, moveUp) {
  var _a;
  const checkboxPattern = /^- \[(x| )\] .+(\n[ \t]+-.*)*$/gm;
  const allCheckboxes = (_a = inputText.match(checkboxPattern)) != null ? _a : [];
  const uncheckedCheckboxes = allCheckboxes.filter(
    (cb) => cb.startsWith("- [ ]")
  );
  const checkedCheckboxes = allCheckboxes.filter(
    (cb) => cb.startsWith("- [x]")
  );
  let reorderedCheckboxes;
  if (moveUp) {
    reorderedCheckboxes = [...uncheckedCheckboxes, ...checkedCheckboxes];
  } else {
    reorderedCheckboxes = [...checkedCheckboxes, ...uncheckedCheckboxes];
  }
  const reorderedText = inputText.replace(
    checkboxPattern,
    () => reorderedCheckboxes.shift() || ""
  );
  return reorderedText;
}
function reorderCheckboxesInFile(inputText, moveUp) {
  const checkboxListPattern = /^- .+(\n[ \t]*- .*)*$/gm;
  const reorderedText = inputText.replace(
    checkboxListPattern,
    (match) => reorderCheckboxesInList(match, moveUp)
  );
  return reorderedText;
}

// src/main.ts
var DEFAULT_SETTINGS = {
  sortTop: true
};
var CheckboxReorderPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    console.log("Checkbox Reorder Plugin loaded");
    this.addCommand({
      id: "reorder-checkboxes",
      name: "Reorder Checkboxes in List",
      editorCallback: (editor, view) => {
        this.reorderCheckboxes(editor);
      }
    });
    this.addSettingTab(new CheckboxReorderSettingsTab(this.app, this));
  }
  onunload() {
    console.log("Checkbox Reorder Plugin unloaded");
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  reorderCheckboxes(editor) {
    const currentText = editor.getValue();
    const reorderedText = reorderCheckboxesInFile(
      currentText,
      this.settings.sortTop
    );
    editor.setValue(reorderedText);
  }
};
var CheckboxReorderSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Checkbox Reorder Settings" });
    new import_obsidian.Setting(containerEl).setName("Top / Bottom").setDesc(
      "On = Top, Off = Bottom. Choose whether to sort checkboxes at the top or bottom."
    ).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.sortTop).onChange(async (value) => {
        this.plugin.settings.sortTop = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3Jlb3JkZXJDaGVja2JveGVzLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQge1xuXHRQbHVnaW4sXG5cdE1hcmtkb3duVmlldyxcblx0RWRpdG9yLFxuXHRXb3Jrc3BhY2VMZWFmLFxuXHRBcHAsXG5cdFBsdWdpblNldHRpbmdUYWIsXG5cdFNldHRpbmcsXG59IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgcmVvcmRlckNoZWNrYm94ZXNJbkZpbGUgfSBmcm9tIFwic3JjL3Jlb3JkZXJDaGVja2JveGVzXCI7XG5cbmludGVyZmFjZSBDaGVja2JveFJlb3JkZXJTZXR0aW5ncyB7XG5cdHNvcnRUb3A6IGJvb2xlYW47XG59XG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IENoZWNrYm94UmVvcmRlclNldHRpbmdzID0ge1xuXHRzb3J0VG9wOiB0cnVlLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hlY2tib3hSZW9yZGVyUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblx0c2V0dGluZ3M6IENoZWNrYm94UmVvcmRlclNldHRpbmdzO1xuXG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXG5cdFx0Y29uc29sZS5sb2coXCJDaGVja2JveCBSZW9yZGVyIFBsdWdpbiBsb2FkZWRcIik7XG5cblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6IFwicmVvcmRlci1jaGVja2JveGVzXCIsXG5cdFx0XHRuYW1lOiBcIlJlb3JkZXIgQ2hlY2tib3hlcyBpbiBMaXN0XCIsXG5cdFx0XHRlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcblx0XHRcdFx0dGhpcy5yZW9yZGVyQ2hlY2tib3hlcyhlZGl0b3IpO1xuXHRcdFx0fSxcblx0XHR9KTtcblxuXHRcdHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgQ2hlY2tib3hSZW9yZGVyU2V0dGluZ3NUYWIodGhpcy5hcHAsIHRoaXMpKTtcblx0fVxuXG5cdG9udW5sb2FkKCkge1xuXHRcdGNvbnNvbGUubG9nKFwiQ2hlY2tib3ggUmVvcmRlciBQbHVnaW4gdW5sb2FkZWRcIik7XG5cdH1cblxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oXG5cdFx0XHR7fSxcblx0XHRcdERFRkFVTFRfU0VUVElOR1MsXG5cdFx0XHRhd2FpdCB0aGlzLmxvYWREYXRhKCksXG5cdFx0KTtcblx0fVxuXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuXHR9XG5cblx0cmVvcmRlckNoZWNrYm94ZXMoZWRpdG9yOiBFZGl0b3IpIHtcblx0XHRjb25zdCBjdXJyZW50VGV4dCA9IGVkaXRvci5nZXRWYWx1ZSgpO1xuXHRcdGNvbnN0IHJlb3JkZXJlZFRleHQgPSByZW9yZGVyQ2hlY2tib3hlc0luRmlsZShcblx0XHRcdGN1cnJlbnRUZXh0LFxuXHRcdFx0dGhpcy5zZXR0aW5ncy5zb3J0VG9wLFxuXHRcdCk7XG5cdFx0ZWRpdG9yLnNldFZhbHVlKHJlb3JkZXJlZFRleHQpO1xuXHR9XG59XG5cbmNsYXNzIENoZWNrYm94UmVvcmRlclNldHRpbmdzVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG5cdHBsdWdpbjogQ2hlY2tib3hSZW9yZGVyUGx1Z2luO1xuXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IENoZWNrYm94UmVvcmRlclBsdWdpbikge1xuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0fVxuXG5cdGRpc3BsYXkoKTogdm9pZCB7XG5cdFx0bGV0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG5cblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xuXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoXCJoMlwiLCB7IHRleHQ6IFwiQ2hlY2tib3ggUmVvcmRlciBTZXR0aW5nc1wiIH0pO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZShcIlRvcCAvIEJvdHRvbVwiKVxuXHRcdFx0LnNldERlc2MoXG5cdFx0XHRcdFwiT24gPSBUb3AsIE9mZiA9IEJvdHRvbS4gQ2hvb3NlIHdoZXRoZXIgdG8gc29ydCBjaGVja2JveGVzIGF0IHRoZSB0b3Agb3IgYm90dG9tLlwiLFxuXHRcdFx0KVxuXHRcdFx0LmFkZFRvZ2dsZSgodG9nZ2xlKSA9PlxuXHRcdFx0XHR0b2dnbGVcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc29ydFRvcClcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zb3J0VG9wID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHR9KSxcblx0XHRcdCk7XG5cdH1cbn1cbiIsICJmdW5jdGlvbiByZW9yZGVyQ2hlY2tib3hlc0luTGlzdChpbnB1dFRleHQ6IHN0cmluZywgbW92ZVVwOiBib29sZWFuKSB7XG5cdGNvbnN0IGNoZWNrYm94UGF0dGVybiA9IC9eLSBcXFsoeHwgKVxcXSAuKyhcXG5bIFxcdF0rLS4qKSokL2dtO1xuXG5cdGNvbnN0IGFsbENoZWNrYm94ZXMgPSBpbnB1dFRleHQubWF0Y2goY2hlY2tib3hQYXR0ZXJuKSA/PyBbXTtcblxuXHRjb25zdCB1bmNoZWNrZWRDaGVja2JveGVzID0gYWxsQ2hlY2tib3hlcy5maWx0ZXIoKGNiKSA9PlxuXHRcdGNiLnN0YXJ0c1dpdGgoXCItIFsgXVwiKSxcblx0KTtcblx0Y29uc3QgY2hlY2tlZENoZWNrYm94ZXMgPSBhbGxDaGVja2JveGVzLmZpbHRlcigoY2IpID0+XG5cdFx0Y2Iuc3RhcnRzV2l0aChcIi0gW3hdXCIpLFxuXHQpO1xuXG5cdGxldCByZW9yZGVyZWRDaGVja2JveGVzOiBzdHJpbmdbXTtcblx0aWYgKG1vdmVVcCkge1xuXHRcdHJlb3JkZXJlZENoZWNrYm94ZXMgPSBbLi4udW5jaGVja2VkQ2hlY2tib3hlcywgLi4uY2hlY2tlZENoZWNrYm94ZXNdO1xuXHR9IGVsc2Uge1xuXHRcdHJlb3JkZXJlZENoZWNrYm94ZXMgPSBbLi4uY2hlY2tlZENoZWNrYm94ZXMsIC4uLnVuY2hlY2tlZENoZWNrYm94ZXNdO1xuXHR9XG5cblx0Y29uc3QgcmVvcmRlcmVkVGV4dCA9IGlucHV0VGV4dC5yZXBsYWNlKFxuXHRcdGNoZWNrYm94UGF0dGVybixcblx0XHQoKSA9PiByZW9yZGVyZWRDaGVja2JveGVzLnNoaWZ0KCkgfHwgXCJcIixcblx0KTtcblxuXHRyZXR1cm4gcmVvcmRlcmVkVGV4dDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlb3JkZXJDaGVja2JveGVzSW5GaWxlKGlucHV0VGV4dDogc3RyaW5nLCBtb3ZlVXA6IGJvb2xlYW4pIHtcblx0Y29uc3QgY2hlY2tib3hMaXN0UGF0dGVybiA9IC9eLSAuKyhcXG5bIFxcdF0qLSAuKikqJC9nbTtcblx0Y29uc3QgcmVvcmRlcmVkVGV4dCA9IGlucHV0VGV4dC5yZXBsYWNlKGNoZWNrYm94TGlzdFBhdHRlcm4sIChtYXRjaCkgPT5cblx0XHRyZW9yZGVyQ2hlY2tib3hlc0luTGlzdChtYXRjaCwgbW92ZVVwKSxcblx0KTtcblx0cmV0dXJuIHJlb3JkZXJlZFRleHQ7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBUU87OztBQ1JQLFNBQVMsd0JBQXdCLFdBQW1CLFFBQWlCO0FBQXJFO0FBQ0MsUUFBTSxrQkFBa0I7QUFFeEIsUUFBTSxpQkFBZ0IsZUFBVSxNQUFNLGVBQWUsTUFBL0IsWUFBb0MsQ0FBQztBQUUzRCxRQUFNLHNCQUFzQixj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
